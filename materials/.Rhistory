idStudy = colSums(rmultinom(nSamples,1,prob=weights)*(1:nStudies))
idStudy = idStudy[order(idStudy)]
idStudy = as.numeric(as.factor(idStudy))
rIntStudy = rep(NA,length(idStudy))
idSample = rep(NA,length(idStudy))
rIntSample = rnorm(length(idStudy),0,.1)
yearPub = rep(NA,length(idStudy))
lvl = levels(as.factor(idStudy))
for(i in 1:length(lvl)){
rIntStudy[idStudy==lvl[i]] = rnorm(1,0,.2)
yearPub[idStudy==lvl[i]] = round(runif(1,2006,2024))
idSample[idStudy==lvl[i]] = paste0(lvl[i],"_",1:sum(idStudy==lvl[i]))
}
true_eff = 0.20 + rIntSample + rIntStudy
n = runif(length(idSample),40,500)
eff = true_eff + rnorm(length(n),0,sqrt(1/(n-3)))
corr = fisherz2r(eff)
df = data.frame(StudyID=idStudy,yearPub=yearPub,SampleID=idSample,EffID=1:length(idStudy),corr=corr,n=n)
df
set.seed(0)
library(psych)
nStudies = 10
nSamples = 15
weights = runif(nStudies,0.9,1.1)
idStudy = colSums(rmultinom(nSamples,1,prob=weights)*(1:nStudies))
idStudy = idStudy[order(idStudy)]
idStudy = as.numeric(as.factor(idStudy))
rIntStudy = rep(NA,length(idStudy))
idSample = rep(NA,length(idStudy))
rIntSample = rnorm(length(idStudy),0,.1)
yearPub = rep(NA,length(idStudy))
lvl = levels(as.factor(idStudy))
for(i in 1:length(lvl)){
rIntStudy[idStudy==lvl[i]] = rnorm(1,0,.2)
yearPub[idStudy==lvl[i]] = round(runif(1,2006,2024))
idSample[idStudy==lvl[i]] = paste0(lvl[i],"_",1:sum(idStudy==lvl[i]))
}
true_eff = 0.20 + rIntSample + rIntStudy
n = round(runif(length(idSample),40,500))
eff = true_eff + rnorm(length(n),0,sqrt(1/(n-3)))
corr = fisherz2r(eff)
df = data.frame(StudyID=idStudy,yearPub=yearPub,SampleID=idSample,EffID=1:length(idStudy),corr=corr,n=n)
df
set.seed(0)
library(psych)
nStudies = 10
nSamples = 15
weights = runif(nStudies,0.9,1.1)
idStudy = colSums(rmultinom(nSamples,1,prob=weights)*(1:nStudies))
idStudy = idStudy[order(idStudy)]
idStudy = as.numeric(as.factor(idStudy))
rIntStudy = rep(NA,length(idStudy))
idSample = rep(NA,length(idStudy))
rIntSample = rnorm(length(idStudy),0,.1)
yearPub = rep(NA,length(idStudy))
lvl = levels(as.factor(idStudy))
for(i in 1:length(lvl)){
rIntStudy[idStudy==lvl[i]] = rnorm(1,0,.2)
yearPub[idStudy==lvl[i]] = round(runif(1,2006,2024))
idSample[idStudy==lvl[i]] = paste0(lvl[i],"_",1:sum(idStudy==lvl[i]))
}
true_eff = 0.20 + rIntSample + rIntStudy
n = round(runif(length(idSample),40,500))
eff = true_eff + rnorm(length(n),0,sqrt(1/(n-3)))
corr = round(fisherz2r(eff),4)
df = data.frame(StudyID=idStudy,yearPub=yearPub,SampleID=idSample,EffID=1:length(idStudy),corr=corr,n=n)
df
set.seed(0)
library(psych)
nStudies = 10
nSamples = 15
weights = runif(nStudies,0.9,1.1)
idStudy = colSums(rmultinom(nSamples,1,prob=weights)*(1:nStudies))
idStudy = idStudy[order(idStudy)]
idStudy = as.numeric(as.factor(idStudy))
rIntStudy = rep(NA,length(idStudy))
idSample = rep(NA,length(idStudy))
rIntSample = rnorm(length(idStudy),0,.1)
yearPub = rep(NA,length(idStudy))
lvl = levels(as.factor(idStudy))
for(i in 1:length(lvl)){
rIntStudy[idStudy==lvl[i]] = rnorm(1,0,.2)
yearPub[idStudy==lvl[i]] = round(runif(1,2006,2024))
idSample[idStudy==lvl[i]] = paste0(lvl[i],"_",1:sum(idStudy==lvl[i]))
}
true_eff = 0.20 + rIntSample + rIntStudy
n = round(runif(length(idSample),40,500))
eff = true_eff + rnorm(length(n),0,sqrt(1/(n-3)))
corr = round(fisherz2r(eff),3)
df = data.frame(StudyID=idStudy,yearPub=yearPub,SampleID=idSample,EffID=1:length(idStudy),corr=corr,n=n)
df
print(df,rownames=F)
df
names(df) = NULL
df
print(df, row.names=F)
print.data.frame(df, row.names=F)
set.seed(0)
library(psych)
nStudies = 10
nSamples = 15
weights = runif(nStudies,0.9,1.1)
idStudy = colSums(rmultinom(nSamples,1,prob=weights)*(1:nStudies))
idStudy = idStudy[order(idStudy)]
idStudy = as.numeric(as.factor(idStudy))
rIntStudy = rep(NA,length(idStudy))
idSample = rep(NA,length(idStudy))
rIntSample = rnorm(length(idStudy),0,.1)
yearPub = rep(NA,length(idStudy))
lvl = levels(as.factor(idStudy))
for(i in 1:length(lvl)){
rIntStudy[idStudy==lvl[i]] = rnorm(1,0,.2)
yearPub[idStudy==lvl[i]] = round(runif(1,2006,2024))
idSample[idStudy==lvl[i]] = paste0(lvl[i],"_",1:sum(idStudy==lvl[i]))
}
true_eff = 0.20 + rIntSample + rIntStudy
n = round(runif(length(idSample),40,500))
eff = true_eff + rnorm(length(n),0,sqrt(1/(n-3)))
corr = round(fisherz2r(eff),3)
df = data.frame(StudyID=idStudy,yearPub=yearPub,SampleID=idSample,EffID=1:length(idStudy),corr=corr,n=n)
library(metafor)
escalc(measure="COR", ri=corr, ni=n, data=df)
library(metafor)
escalc(measure="CORZ", ri=corr, ni=n, data=df)
?escalc
library(metafor)
escalc(measure="ZCOR", ri=corr, ni=n, data=df)
trimfill(fit)
toffee::funnelT
fit$yi
fit
set.seed(0)
library(psych)
nStudies = 10
nSamples = 15
weights = runif(nStudies,0.9,1.1)
idStudy = colSums(rmultinom(nSamples,1,prob=weights)*(1:nStudies))
idStudy = idStudy[order(idStudy)]
idStudy = as.numeric(as.factor(idStudy))
rIntStudy = rep(NA,length(idStudy))
idSample = rep(NA,length(idStudy))
rIntSample = rnorm(length(idStudy),0,.1)
yearPub = rep(NA,length(idStudy))
lvl = levels(as.factor(idStudy))
for(i in 1:length(lvl)){
rIntStudy[idStudy==lvl[i]] = rnorm(1,0,.2)
yearPub[idStudy==lvl[i]] = round(runif(1,2006,2024))
idSample[idStudy==lvl[i]] = paste0(lvl[i],"_",1:sum(idStudy==lvl[i]))
}
true_eff = 0.20 + rIntSample + rIntStudy
n = round(runif(length(idSample),40,500))
eff = true_eff + rnorm(length(n),0,sqrt(1/(n-3)))
corr = round(fisherz2r(eff),3)
df = data.frame(StudyID=idStudy,yearPub=yearPub,SampleID=idSample,EffID=1:length(idStudy),corr=corr,n=n)
df2 = df
df$eff = fisherz(df$corr)
df$vi = 1 / (df$n - 3)
fit = rma.mv(eff, vi, random =~ 1|StudyID/SampleID, data = df)
summary(fit)
fit$yi
fit$vi
fit$se
toffee::funnelT()
toffee::funnelT
yi = fit$yi
se <- sqrt(fit$vi)
x = function (fit = NA, petpeese = NA, showStudies = T, xlab = NA,
sizetext = 20)
{
if (is.na(petpeese))
petpeese = ""
if (petpeese == "pet-peese")
petpeese = "petpeese"
if (is.na(sizetext))
sizetext = 20
if (is.na(xlab))
xlab = "Effect size"
if (is.na(showStudies))
showStudies = FALSE
b0 <- fit$beta
se <- sqrt(fit$vi)
se.seq <- seq(0.001, max(se), 0.01)
eff.ll95 <- as.vector(b0) + qnorm(0.025) * se.seq
eff.ul95 <- as.vector(b0) + qnorm(0.975) * se.seq
dfp <- data.frame(se = rep(se.seq, 2), eff = c(eff.ll95,
eff.ul95))
yi = fit$yi
vi = fit$vi
if (!is.null(fit$random)) {
Study = strsplit(as.character(fit$random), "| ", fixed = T)[[1]][2]
if (grepl("/", Study))
Study = substr(Study, 1, gregexpr("/", Study)[[1]][1] -
1)
}
else {
Study = ""
}
d = data.frame(yi = yi, vi = vi, se = se)
if (Study != "" & showStudies == TRUE)
d$study = as.factor(df[, Study])
if (petpeese == "pet" | petpeese == "petpeese") {
method = "pet"
(pet = update(fit, mods = ~se))
regEff <- data.frame(se = seq(0, max(se), length = 100),
eff = NA)
regEff$eff <- pet$beta[1] + pet$beta[2] * regEff$se
regEst <- data.frame(b = pet$beta[1], lb = pet$ci.lb[1],
ub = pet$ci.ub[1])
pvalest <- pet$pval[1]
pvalreg <- pet$pval[2]
}
if (petpeese == "petpeese") {
if (pet$pval[1] < 0.05 & pet$beta[1] > 0) {
method = "peese"
peese = update(fit, mods = ~vi)
regEff <- data.frame(se = seq(0, max(se), length = 100),
eff = NA)
regEff$eff <- peese$beta[1] + peese$beta[2] * regEff$se^2
regEst <- data.frame(b = peese$beta[1], lb = peese$ci.lb[1],
ub = peese$ci.ub[1])
pvalest <- peese$pval[1]
pvalreg <- peese$pval[2]
}
}
if (petpeese == "peese") {
method = "peese"
peese = update(fit, mods = ~vi)
regEff <- data.frame(se = seq(0, max(se), length = 100),
eff = NA)
regEff$eff <- peese$beta[1] + peese$beta[2] * regEff$se^2
regEst <- data.frame(b = peese$beta[1], lb = peese$ci.lb[1],
ub = peese$ci.ub[1])
pvalest <- peese$pval[1]
pvalreg <- peese$pval[2]
}
if (petpeese == "petpeese") {
print(paste("Based on the pet-peese procedure, the method used was:",
method), quote = F)
print(paste("The p-value for the", method, "regression was p =",
format(round(pvalreg, 4), nsmall = 4)), quote = F)
print(paste("The bias-adjusted effect size was d = ",
format(round(regEst$b, 2), nsmall = 2), " [95% CI: ",
format(round(regEst$lb, 2), nsmall = 2), ", ", format(round(regEst$ub,
2), nsmall = 2), "], p = ", format(round(pvalest,
4), nsmall = 4), sep = ""), quote = F)
}
if (is.null(d$study)) {
ggFunnel = ggplot() + theme(panel.grid.minor.x = element_blank(),
panel.grid.major.x = element_blank(), panel.grid.minor.y = element_blank(),
panel.grid = element_line(size = 1.2)) + geom_point(data = d,
aes(x = se, y = yi), size = 2.6, stroke = 3) + geom_point(data = dfp,
aes(x = se, y = eff), size = 1.3, color = "#888888") +
geom_segment(aes(x = 0, xend = max(se), y = b0, yend = b0),
size = 1) + theme(axis.text = element_text(size = sizetext),
axis.title.x = element_text(size = sizetext), axis.title.y = element_text(size = sizetext *
1.2)) + xlab("Standard error") + ylab(xlab) +
coord_flip() + scale_x_reverse(breaks = seq(0, 2,
0.1))
if (petpeese %in% c("petpeese", "pet", "peese")) {
ggFunnel = ggFunnel + geom_line(data = regEff, aes(x = se,
y = eff), size = 1) + geom_point(data = regEst,
aes(x = 0, y = b), size = 3) + geom_errorbar(data = regEst,
aes(x = 0, ymin = lb, ymax = ub), width = 0.02,
size = 0.8) + scale_y_continuous(breaks = seq(-10,
10, 0.5), sec.axis = sec_axis(~. * 1, name = paste("FUNNEL PLOT (with ",
method, ")", sep = ""), breaks = seq(-10, 10,
0.5)))
}
else {
ggFunnel = ggFunnel + scale_y_continuous(breaks = seq(-10,
10, 0.5), sec.axis = sec_axis(~. * 1, name = "FUNNEL PLOT",
breaks = seq(-10, 10, 0.5)))
}
}
else {
ggFunnel = ggplot() + theme(panel.grid.minor.x = element_blank(),
panel.grid.major.x = element_blank(), panel.grid.minor.y = element_blank(),
panel.grid = element_line(size = 1.2)) + geom_point(data = d,
aes(x = se, y = eff, color = study, shape = study),
size = 2.6, stroke = 3) + scale_shape_manual(values = rep(1:24,
10)[1:length(levels(as.factor(d$study)))]) + geom_point(data = dfp,
aes(x = se, y = eff), size = 1.3, color = "#888888") +
geom_segment(aes(x = 0, xend = max(d$se), y = b0,
yend = b0), size = 1) + theme(axis.text = element_text(size = sizetext),
axis.title.x = element_text(size = sizetext), axis.title.y = element_text(size = sizetext *
1.2)) + guides(shape = guide_legend(title = "Study"),
color = guide_legend(title = "Study")) + theme(legend.text = element_text(size = sizetext/1.8),
legend.title = element_text(size = sizetext/1.5)) +
xlab("Standard error") + ylab(xlab) + coord_flip() +
scale_x_reverse(breaks = seq(0, 2, 0.1))
if (petpeese %in% c("petpeese", "pet", "peese")) {
ggFunnel = ggFunnel + geom_line(data = regEff, aes(x = se,
y = eff), size = 1) + geom_point(data = regEst,
aes(x = 0, y = b), size = 3) + geom_errorbar(data = regEst,
aes(x = 0, ymin = lb, ymax = ub), width = 0.02,
size = 0.8) + scale_y_continuous(breaks = seq(-10,
10, 0.5), sec.axis = sec_axis(~. * 1, name = paste("FUNNEL PLOT (with ",
method, ")", sep = ""), breaks = seq(-10, 10,
0.5)))
}
else {
ggFunnel = ggFunnel + scale_y_continuous(breaks = seq(-10,
10, 0.5), sec.axis = sec_axis(~. * 1, name = "FUNNEL PLOT",
breaks = seq(-10, 10, 0.5)))
}
}
return(ggFunnel)
}
x(fit)
library(ggplot2)
x = function (fit = NA, petpeese = NA, showStudies = T, xlab = NA,
sizetext = 20)
{
if (is.na(petpeese))
petpeese = ""
if (petpeese == "pet-peese")
petpeese = "petpeese"
if (is.na(sizetext))
sizetext = 20
if (is.na(xlab))
xlab = "Effect size"
if (is.na(showStudies))
showStudies = FALSE
b0 <- fit$beta
se <- sqrt(fit$vi)
se.seq <- seq(0.001, max(se), 0.01)
eff.ll95 <- as.vector(b0) + qnorm(0.025) * se.seq
eff.ul95 <- as.vector(b0) + qnorm(0.975) * se.seq
dfp <- data.frame(se = rep(se.seq, 2), eff = c(eff.ll95,
eff.ul95))
yi = fit$yi
vi = fit$vi
if (!is.null(fit$random)) {
Study = strsplit(as.character(fit$random), "| ", fixed = T)[[1]][2]
if (grepl("/", Study))
Study = substr(Study, 1, gregexpr("/", Study)[[1]][1] -
1)
}
else {
Study = ""
}
d = data.frame(yi = yi, vi = vi, se = se)
if (Study != "" & showStudies == TRUE)
d$study = as.factor(df[, Study])
if (petpeese == "pet" | petpeese == "petpeese") {
method = "pet"
(pet = update(fit, mods = ~se))
regEff <- data.frame(se = seq(0, max(se), length = 100),
eff = NA)
regEff$eff <- pet$beta[1] + pet$beta[2] * regEff$se
regEst <- data.frame(b = pet$beta[1], lb = pet$ci.lb[1],
ub = pet$ci.ub[1])
pvalest <- pet$pval[1]
pvalreg <- pet$pval[2]
}
if (petpeese == "petpeese") {
if (pet$pval[1] < 0.05 & pet$beta[1] > 0) {
method = "peese"
peese = update(fit, mods = ~vi)
regEff <- data.frame(se = seq(0, max(se), length = 100),
eff = NA)
regEff$eff <- peese$beta[1] + peese$beta[2] * regEff$se^2
regEst <- data.frame(b = peese$beta[1], lb = peese$ci.lb[1],
ub = peese$ci.ub[1])
pvalest <- peese$pval[1]
pvalreg <- peese$pval[2]
}
}
if (petpeese == "peese") {
method = "peese"
peese = update(fit, mods = ~vi)
regEff <- data.frame(se = seq(0, max(se), length = 100),
eff = NA)
regEff$eff <- peese$beta[1] + peese$beta[2] * regEff$se^2
regEst <- data.frame(b = peese$beta[1], lb = peese$ci.lb[1],
ub = peese$ci.ub[1])
pvalest <- peese$pval[1]
pvalreg <- peese$pval[2]
}
if (petpeese == "petpeese") {
print(paste("Based on the pet-peese procedure, the method used was:",
method), quote = F)
print(paste("The p-value for the", method, "regression was p =",
format(round(pvalreg, 4), nsmall = 4)), quote = F)
print(paste("The bias-adjusted effect size was d = ",
format(round(regEst$b, 2), nsmall = 2), " [95% CI: ",
format(round(regEst$lb, 2), nsmall = 2), ", ", format(round(regEst$ub,
2), nsmall = 2), "], p = ", format(round(pvalest,
4), nsmall = 4), sep = ""), quote = F)
}
if (is.null(d$study)) {
ggFunnel = ggplot() + theme(panel.grid.minor.x = element_blank(),
panel.grid.major.x = element_blank(), panel.grid.minor.y = element_blank(),
panel.grid = element_line(size = 1.2)) + geom_point(data = d,
aes(x = se, y = yi), size = 2.6, stroke = 3) + geom_point(data = dfp,
aes(x = se, y = eff), size = 1.3, color = "#888888") +
geom_segment(aes(x = 0, xend = max(se), y = b0, yend = b0),
size = 1) + theme(axis.text = element_text(size = sizetext),
axis.title.x = element_text(size = sizetext), axis.title.y = element_text(size = sizetext *
1.2)) + xlab("Standard error") + ylab(xlab) +
coord_flip() + scale_x_reverse(breaks = seq(0, 2,
0.1))
if (petpeese %in% c("petpeese", "pet", "peese")) {
ggFunnel = ggFunnel + geom_line(data = regEff, aes(x = se,
y = eff), size = 1) + geom_point(data = regEst,
aes(x = 0, y = b), size = 3) + geom_errorbar(data = regEst,
aes(x = 0, ymin = lb, ymax = ub), width = 0.02,
size = 0.8) + scale_y_continuous(breaks = seq(-10,
10, 0.5), sec.axis = sec_axis(~. * 1, name = paste("FUNNEL PLOT (with ",
method, ")", sep = ""), breaks = seq(-10, 10,
0.5)))
}
else {
ggFunnel = ggFunnel + scale_y_continuous(breaks = seq(-10,
10, 0.5), sec.axis = sec_axis(~. * 1, name = "FUNNEL PLOT",
breaks = seq(-10, 10, 0.5)))
}
}
else {
ggFunnel = ggplot() + theme(panel.grid.minor.x = element_blank(),
panel.grid.major.x = element_blank(), panel.grid.minor.y = element_blank(),
panel.grid = element_line(size = 1.2)) + geom_point(data = d,
aes(x = se, y = eff, color = study, shape = study),
size = 2.6, stroke = 3) + scale_shape_manual(values = rep(1:24,
10)[1:length(levels(as.factor(d$study)))]) + geom_point(data = dfp,
aes(x = se, y = eff), size = 1.3, color = "#888888") +
geom_segment(aes(x = 0, xend = max(d$se), y = b0,
yend = b0), size = 1) + theme(axis.text = element_text(size = sizetext),
axis.title.x = element_text(size = sizetext), axis.title.y = element_text(size = sizetext *
1.2)) + guides(shape = guide_legend(title = "Study"),
color = guide_legend(title = "Study")) + theme(legend.text = element_text(size = sizetext/1.8),
legend.title = element_text(size = sizetext/1.5)) +
xlab("Standard error") + ylab(xlab) + coord_flip() +
scale_x_reverse(breaks = seq(0, 2, 0.1))
if (petpeese %in% c("petpeese", "pet", "peese")) {
ggFunnel = ggFunnel + geom_line(data = regEff, aes(x = se,
y = eff), size = 1) + geom_point(data = regEst,
aes(x = 0, y = b), size = 3) + geom_errorbar(data = regEst,
aes(x = 0, ymin = lb, ymax = ub), width = 0.02,
size = 0.8) + scale_y_continuous(breaks = seq(-10,
10, 0.5), sec.axis = sec_axis(~. * 1, name = paste("FUNNEL PLOT (with ",
method, ")", sep = ""), breaks = seq(-10, 10,
0.5)))
}
else {
ggFunnel = ggFunnel + scale_y_continuous(breaks = seq(-10,
10, 0.5), sec.axis = sec_axis(~. * 1, name = "FUNNEL PLOT",
breaks = seq(-10, 10, 0.5)))
}
}
return(ggFunnel)
}
x(fit)
remove.packages("toffee")
devtools::install_github("enricotoffalini/toffee")
library(ggplot2)
?funnelT
fit
regplot(fit1)
?forest
library(metafor)
?escalc
ng = round(runif(1,nmin,nmax)+runif(1,0,2))
nmin = 9; nmax = 70
ng = round(runif(1,nmin,nmax)+runif(1,0,2))
ng
set.seed(0)
nStudies = 20
idStudy = 1:nStudies
rIntStudy = rnorm(nStudies,0,.15)
dosage = round(runif(nStudies,4,18))
nmin = 9; nmax = 70
true_eff = 0.40 + dosage*0.01 + rIntStudy
df = data.frame(StudyID=idStudy, yearPub=round(runif(nStudies,2003,2024)), N_CG=NA, M_CG=NA, SD_CG=NA, N_TG=NA, M_TG=NA, SD_TG=NA, dosage=dosage)
for(i in 1:nrow(df)){
nc = round(runif(1,nmin,nmax)+runif(1,0,2))
cg = rnorm(nc,0,1)
nt = round(runif(1,nmin,nmax)+runif(1,0,2))
tg = rnorm(nt,true_eff[i],1)
df$N_CG[i] = nc; df$M_CG[i] = mean(cg); df$SD_CG = sd(cg)
df$N_TG[i] = nt; df$M_TG[i] = mean(tg); df$SD_TG = sd(tg)
}
df
set.seed(0)
nStudies = 20
idStudy = 1:nStudies
rIntStudy = rnorm(nStudies,0,.15)
dosage = round(runif(nStudies,4,18))
nmin = 9; nmax = 55
true_eff = 0.40 + dosage*0.01 + rIntStudy
df = data.frame(StudyID=idStudy, yearPub=round(runif(nStudies,2003,2024)), N_CG=NA, M_CG=NA, SD_CG=NA, N_TG=NA, M_TG=NA, SD_TG=NA, weeks=dosage)
for(i in 1:nrow(df)){
nc = round(runif(1,nmin,nmax)+runif(1,0,2))
cg = rnorm(nc,0,1)
nt = round(runif(1,nmin,nmax)+runif(1,0,2))
tg = rnorm(nt,true_eff[i],1)
df$N_CG[i] = nc; df$M_CG[i] = round(mean(cg),2); df$SD_CG[i] = round(sd(cg),2)
df$N_TG[i] = nt; df$M_TG[i] = round(mean(tg),2); df$SD_TG[i] = round(sd(tg),2)
}
df
for(i in 1:nrow(df)){
M = runif(1,0,100)
SD = runif(1,0.8,1.1)*M/10
nc = round(runif(1,nmin,nmax)+runif(1,0,2))
cg = rnorm(nc,M,SD)
nt = round(runif(1,nmin,nmax)+runif(1,0,2))
tg = rnorm(nt,M+SD*true_eff[i],SD)
df$N_CG[i] = nc; df$M_CG[i] = round(mean(cg),2); df$SD_CG[i] = round(sd(cg),2)
df$N_TG[i] = nt; df$M_TG[i] = round(mean(tg),2); df$SD_TG[i] = round(sd(tg),2)
}
df
?rma
